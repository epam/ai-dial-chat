include:
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - project: "Gitlab/ci"
    ref: 0.2.22
    file: "application/nodejs.yml"
  - project: Gitlab/ci
    ref: 0.2.22
    file: helm/helm-environment.gitlab-ci.yml


variables:
  ARTIFACTORY_DOCKER_PATH: "ai/dial/chatbot-ui"
  AUDIT_CMD: "npm audit --omit dev"
  INSTALL_CMD: "npm i"

  DOCKER_REGISTRY_SERVER: "registry-dev.deltixhub.com"
  HELM_REPO: https://nexus.deltixhub.com/repository/epm-rtc-helm
  SECRET_NAME: "epm-rtc-registry-dev"
  CHART: "chat" # Helm chart name, e.g. "gitlab-runner"
  VERSION: "0.1.2" # Helm chart version

  development_AWS_ACCESS_KEY_ID: ${staging_AWS_ACCESS_KEY_ID}
  development_AWS_SECRET_ACCESS_KEY: ${staging_AWS_SECRET_ACCESS_KEY}
  development_ENV_ID: "staging"
  development_HELM_VALUES_FILE: "helm/development.yaml"
  development_ENV_URL: "https://chat.staging.deltixhub.io"
  development_NAMESPACE: ai-chat
  development_HELM_EXTRA_ARGS: "-f ${HELM_SECRET_FILE_dev}"

  development_HELM_VALUES_FILE_OVERLAY: "helm/development-overlay.yaml"
  development_RELEASE_OVERLAY: development-overlay

  development_HELM_VALUES_FILE_OVERLAY10K: "helm/development-overlay10k.yaml"
  development_RELEASE_OVERLAY10K: development-overlay10k

  staging_DEPLOY_ENV: "false"

  review_DEPLOY_ENV: "true"
  review_ENV_ID: "staging"
  review_HELM_VALUES_FILE: "helm/review.yaml"
  review_ENV_URL: "https://${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}.staging.deltixhub.io"
  review_NAMESPACE: ai-chat-review
  review_HELM_CUSTOM_VALUES: "ingress.hosts[0]=${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}.staging.deltixhub.io,fullnameOverride=mr-${CI_MERGE_REQUEST_IID},image.tag=mr-${CI_MERGE_REQUEST_IID},serviceAccount.name=mr-${CI_MERGE_REQUEST_IID},env.NEXTAUTH_URL=https://${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}.staging.deltixhub.io"
  review_RELEASE: ${CHART}-mr-${CI_MERGE_REQUEST_IID}
  review_SECRET_NAME: "epm-rtc-registry-test"
  review_DOCKER_REGISTRY_SERVER: "registry-test.deltixhub.com"
  review_HELM_EXTRA_ARGS: "-f ${HELM_SECRET_FILE_review}"

  review_HELM_VALUES_FILE_OVERLAY: "helm/review-overlay.yaml"
  review_HELM_CUSTOM_VALUES_OVERLAY: "ingress.hosts[0]=${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}-overlay.staging.deltixhub.io,fullnameOverride=mr-${CI_MERGE_REQUEST_IID}-overlay,image.tag=mr-${CI_MERGE_REQUEST_IID},serviceAccount.name=mr-${CI_MERGE_REQUEST_IID}-overlay,env.NEXTAUTH_URL=https://${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}-overlay.staging.deltixhub.io"
  review_RELEASE_OVERLAY: ${CHART}-overlay-mr-${CI_MERGE_REQUEST_IID}

  review_HELM_VALUES_FILE_OVERLAY10K: "helm/review-overlay10k.yaml"
  review_HELM_CUSTOM_VALUES_OVERLAY10K: "ingress.hosts[0]=${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}-overlay10k.staging.deltixhub.io,fullnameOverride=mr-${CI_MERGE_REQUEST_IID}-overlay10k,image.tag=mr-${CI_MERGE_REQUEST_IID},serviceAccount.name=mr-${CI_MERGE_REQUEST_IID}-overlay10k,env.NEXTAUTH_URL=https://${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}-overlay10k.staging.deltixhub.io"
  review_RELEASE_OVERLAY10K: ${CHART}-overlay10k-mr-${CI_MERGE_REQUEST_IID}

stages:
  - test
  - prepare
  - build
  - publish # publush docker images
  - deploy
  - promote # copy docker image to public repo
  - production # Stage name used in include. Not used. ToDo - delete this

.deploy:
  cache: []
  script:
    - echo ${HELM_EXTRA_ARGS}
    - export ENV_PREFIX=${CI_ENVIRONMENT_NAME%%/*} # get env name or env group name as prefix
    - eval 'for variable in "${!'"$ENV_PREFIX"_'@}"; do export "${variable#'"$ENV_PREFIX"_'}"="${!variable}" ; done' #replace $ENV_PREFIX_var to var
    - echo ${HELM_EXTRA_ARGS}
    - if [[ "$PRIVATE_HELM_REPO" = "true" ]]; then helm repo add ${REPO} ${HELM_REPO} --username ${HELM_REPO_USER} --password ${HELM_REPO_PASS}; else helm repo add ${REPO} ${HELM_REPO}; fi
    - helm repo update
    - aws eks update-kubeconfig --name ${ENV_ID}
    - kubectl create namespace $NAMESPACE || echo "Namespace $NAMESPACE already exists"
    - if [[ "$SECRET" = "true" ]]; then kubectl delete secret $SECRET_NAME --namespace=$NAMESPACE --ignore-not-found && kubectl create secret docker-registry $SECRET_NAME --docker-server=$DOCKER_REGISTRY_SERVER --docker-username=$DOCKER_REGISTRY_USER --docker-password=$DOCKER_REGISTRY_PASS --namespace=$NAMESPACE; fi
    - kubectl delete secret maintainer-${RELEASE} --namespace=$NAMESPACE --ignore-not-found && kubectl create secret generic maintainer-${RELEASE} --namespace=$NAMESPACE --from-literal=gitlabRepo="${CI_PROJECT_URL}" --from-literal=gitlabUser="${GITLAB_USER_LOGIN}"
    - helm upgrade ${RELEASE} ${REPO}/${CHART} --version ${VERSION} -f ${HELM_VALUES_FILE} --set "$HELM_CUSTOM_VALUES" --namespace ${NAMESPACE} --install --create-namespace ${ATOMIC:+ "--atomic"} ${HELM_EXTRA_ARGS} --disable-openapi-validation --stderrthreshold=ERROR || (echo -e "\e[91mERROR  ${CHART} deployment failed" && exit 1)
    - helm upgrade ${RELEASE_OVERLAY} ${REPO}/${CHART} --version ${VERSION} -f ${HELM_VALUES_FILE_OVERLAY} --set "$HELM_CUSTOM_VALUES_OVERLAY" --namespace ${NAMESPACE} --install --create-namespace ${ATOMIC:+ "--atomic"} ${HELM_EXTRA_ARGS} --disable-openapi-validation --stderrthreshold=ERROR || (echo -e "\e[91mERROR  ${CHART} deployment failed" && exit 1)
    - helm upgrade ${RELEASE_OVERLAY10K} ${REPO}/${CHART} --version ${VERSION} -f ${HELM_VALUES_FILE_OVERLAY10K} --set "$HELM_CUSTOM_VALUES_OVERLAY10K" --namespace ${NAMESPACE} --install --create-namespace ${ATOMIC:+ "--atomic"} ${HELM_EXTRA_ARGS} --disable-openapi-validation --stderrthreshold=ERROR || (echo -e "\e[91mERROR  ${CHART} deployment failed" && exit 1)
    - if [[ "$VERBOSE" = "true" ]]; then helm list -a -n ${NAMESPACE}; fi
  resource_group: $CI_ENVIRONMENT_NAME
  tags:
    - kubernetes

.destroy:
  variables:
    GIT_STRATEGY: none
  cache: []
  script:
    - export ENV_PREFIX=${CI_ENVIRONMENT_NAME%%/*} # get env name or env group name as prefix
    - eval 'for variable in "${!'"$ENV_PREFIX"_'@}"; do export "${variable#'"$ENV_PREFIX"_'}"="${!variable}" ; done' #replace $ENV_PREFIX_var to var
    - aws eks update-kubeconfig --name ${ENV_ID}
    - if [[ "$SECRET" = "true" ]]; then kubectl delete secret $SECRET_NAME --namespace=$NAMESPACE --ignore-not-found; fi
    - kubectl delete secret maintainer-${RELEASE} --namespace=$NAMESPACE --ignore-not-found
    - helm uninstall ${RELEASE} --namespace ${NAMESPACE}
    - helm uninstall ${RELEASE_OVERLAY} --namespace ${NAMESPACE}
    - helm uninstall ${RELEASE_OVERLAY10K} --namespace ${NAMESPACE}
    - if [[ "$VERBOSE" = "true" ]]; then helm list -a -n ${NAMESPACE}; fi
  resource_group: $CI_ENVIRONMENT_NAME
  environment:
    action: stop
  tags:
    - kubernetes

build:
  artifacts:
    paths:
      - "build"
  rules:
    - if: "$CI_COMMIT_BRANCH == 'development'"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"

deploy_development:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "development"

destroy_development:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      when: manual
      allow_failure: true

deploy_staging:
  stage: deploy

destroy_staging:
  stage: deploy

deploy_review:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development" && $review_DEPLOY_ENV == "true"'

destroy_review:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development" && $review_DEPLOY_ENV == "true"'
      when: manual
      allow_failure: true

publish:
  image: dockerhub.deltixhub.com/docker:stable
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  cache: {}
  services:
    - docker:stable-dind
  before_script:
    - mkdir -p $HOME/.docker
    # Use DOCKER_AUTH_CONFIG for login to deltix repo
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script:
    - imageUrl=$REPOSITORY/${ARTIFACTORY_DOCKER_PATH}
    - docker build -t $imageUrl:${DOCKER_TAG} -t $imageUrl:${DOCKER_ADDITIONAL_TAG} .
    - docker push $imageUrl:${DOCKER_TAG}
    - docker push $imageUrl:${DOCKER_ADDITIONAL_TAG} 
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_TAG: ${CI_COMMIT_TAG}
        DOCKER_ADDITIONAL_TAG: latest
        REPOSITORY: ${ARTIFACTORY_DOCKER_DEV_REPOSITORY}
    - if: $CI_COMMIT_BRANCH  == "development"
      variables:
        DOCKER_TAG: ${CI_COMMIT_REF_SLUG}
        DOCKER_ADDITIONAL_TAG: alpha
        REPOSITORY: ${ARTIFACTORY_DOCKER_DEV_REPOSITORY}
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development"'
      variables:
        DOCKER_TAG: gitlab-mr${CI_MERGE_REQUEST_ID}
        DOCKER_ADDITIONAL_TAG: mr-${CI_MERGE_REQUEST_IID}
        REPOSITORY: ${ARTIFACTORY_DOCKER_TEST_REPOSITORY}

container_scanning:
  stage: promote
  variables:
    GIT_STRATEGY: none
    CS_IMAGE: ${ARTIFACTORY_DOCKER_DEV_REPOSITORY}/${ARTIFACTORY_DOCKER_PATH}:$CI_COMMIT_TAG
    CS_REGISTRY_USER: ${ARTIFACTORY_USER}
    CS_REGISTRY_PASSWORD: ${ARTIFACTORY_PASS}
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - AWS
    - DockerExecutor

### Copy frontend and backend docker images to public repository. Run on git tag manually
promote:
  image: dockerhub.deltixhub.com/curlimages/curl:7.88.1
  stage: promote
  variables:
    GIT_STRATEGY: none
  script:
    - 'curl --retry 6 --retry-all-errors --no-progress-meter --fail -X POST "${ARTIFACTORY_URL}/api/docker/epm-rtc-docker/v2/promote" -H "Content-Type: application/json" -u${ARTIFACTORY_USER}:${ARTIFACTORY_PASS} -d ''{ "targetRepo": "epm-rtc-public-docker", "dockerRepository": "''"${ARTIFACTORY_DOCKER_PATH}"''", "tag" : "''"$CI_COMMIT_TAG"''", "copy": true }'''
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  tags:
    - AWS
    - DockerExecutor

