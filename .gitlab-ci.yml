include:
  - project: "Gitlab/ci"
    ref: 0.2.22
    file: "application/nodejs.yml"
  - project: Gitlab/ci
    ref: 0.2.22
    file: helm/helm-environment.gitlab-ci.yml


variables:
  SKIP_LINT: "true"
  ARTIFACTORY_DOCKER_PATH: "ai/dial/chatbot-ui"

  DOCKER_REGISTRY_SERVER: "registry-dev.deltixhub.com"
  HELM_REPO: https://nexus.deltixhub.com/repository/epm-rtc-helm
  SECRET_NAME: "epm-rtc-registry-dev"
  CHART: "chat" # Helm chart name, e.g. "gitlab-runner"
  VERSION: "0.0.1" # Helm chart version

  development_AWS_ACCESS_KEY_ID: ${staging_AWS_ACCESS_KEY_ID}
  development_AWS_SECRET_ACCESS_KEY: ${staging_AWS_SECRET_ACCESS_KEY}
  development_ENV_ID: "staging"
  development_HELM_VALUES_FILE: "helm/development.yaml"
  development_ENV_URL: "https://chat.staging.deltixhub.io"
  development_NAMESPACE: ai-chat
  development_HELM_EXTRA_ARGS: "-f ${HELM_SECRET_FILE_dev}"

  staging_DEPLOY_ENV: "false"

  review_DEPLOY_ENV: "true"
  review_ENV_ID: "staging"
  review_HELM_VALUES_FILE: "helm/review.yaml"
  review_ENV_URL: "https://${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}.staging.deltixhub.io"
  review_NAMESPACE: ai-chat-review
  review_HELM_CUSTOM_VALUES: "ingress.hosts[0]=${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}.staging.deltixhub.io,fullnameOverride=mr-${CI_MERGE_REQUEST_IID},image.tag=mr-${CI_MERGE_REQUEST_IID},serviceAccount.name=mr-${CI_MERGE_REQUEST_IID},env.NEXTAUTH_URL=https://${CI_PROJECT_NAME}-mr-${CI_MERGE_REQUEST_IID}.staging.deltixhub.io"
  review_RELEASE: ${CHART}-mr-${CI_MERGE_REQUEST_IID}
  review_SECRET_NAME: "epm-rtc-registry-test"
  review_DOCKER_REGISTRY_SERVER: "registry-test.deltixhub.com"
  review_HELM_EXTRA_ARGS: "-f ${HELM_SECRET_FILE_review}"

stages:
  - test
  - prepare
  - build
  - publish # publush docker images
  - deploy
  - promote # copy docker image to public repo
  - production # Stage name used in include. Not used. ToDo - delete this

build:
  artifacts:
    paths:
      - "build"
  rules:
    - if: "$CI_COMMIT_BRANCH == 'development'"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"

deploy_development:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "development"

destroy_development:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      when: manual
      allow_failure: true

deploy_staging:
  stage: deploy

destroy_staging:
  stage: deploy

deploy_review:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development" && $review_DEPLOY_ENV == "true"'

destroy_review:
  image: "registry.deltixhub.com/deltix.docker/devops/kubernetes-tools:0.17.1"
  stage: deploy
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development" && $review_DEPLOY_ENV == "true"'
      when: manual
      allow_failure: true

publish:
  image: dockerhub.deltixhub.com/docker:stable
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  cache: {}
  services:
    - docker:stable-dind
  before_script:
    - mkdir -p $HOME/.docker
    # Use DOCKER_AUTH_CONFIG for login to deltix repo
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script:
    - imageUrl=$REPOSITORY/${ARTIFACTORY_DOCKER_PATH}
    - docker build -t $imageUrl:${DOCKER_TAG} -t $imageUrl:${DOCKER_ADDITIONAL_TAG} .
    - docker push $imageUrl:${DOCKER_TAG}
    - docker push $imageUrl:${DOCKER_ADDITIONAL_TAG} 
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_TAG: ${CI_COMMIT_TAG}
        DOCKER_ADDITIONAL_TAG: latest
        REPOSITORY: ${ARTIFACTORY_DOCKER_DEV_REPOSITORY}
    - if: $CI_COMMIT_BRANCH  == "development"
      variables:
        DOCKER_TAG: ${CI_COMMIT_REF_SLUG}
        DOCKER_ADDITIONAL_TAG: alpha
        REPOSITORY: ${ARTIFACTORY_DOCKER_DEV_REPOSITORY}
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development"'
      variables:
        DOCKER_TAG: gitlab-mr${CI_MERGE_REQUEST_ID}
        DOCKER_ADDITIONAL_TAG: mr-${CI_MERGE_REQUEST_IID}
        REPOSITORY: ${ARTIFACTORY_DOCKER_TEST_REPOSITORY}

### Copy frontend and backend docker images to public repository. Run on git tag manually
promote:
  image: dockerhub.deltixhub.com/curlimages/curl:7.88.1
  stage: promote
  variables:
    GIT_STRATEGY: none
  script:
    - 'curl --retry 6 --retry-all-errors --no-progress-meter --fail -X POST "${ARTIFACTORY_URL}/api/docker/epm-rtc-docker/v2/promote" -H "Content-Type: application/json" -u${ARTIFACTORY_USER}:${ARTIFACTORY_PASS} -d ''{ "targetRepo": "epm-rtc-public-docker", "dockerRepository": "''"${ARTIFACTORY_DOCKER_PATH}"''", "tag" : "''"$CI_COMMIT_TAG"''", "copy": true }'''
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  tags:
    - AWS
    - DockerExecutor

