import { Conversation } from '@/chat/types/chat';
import { DialAIEntityModel } from '@/chat/types/models';
import dialTest from '@/src/core/dialFixtures';
import {
  API,
  Attachment,
  ExpectedMessages,
  Import,
  MenuOptions,
  MockedChatApiResponseBodies,
} from '@/src/testData';
import { Colors } from '@/src/ui/domData';
import { UploadDownloadData } from '@/src/ui/pages';
import { BucketUtil, FileUtil, GeneratorUtil, ModelsUtil } from '@/src/utils';
import { expect } from '@playwright/test';

let responseImageUrl: string;
let requestImageUrl: string;
let secondResponseImageUrl: string;
let requestImageAttachmentPath: string;
let responseImageAttachmentPath: string;
let defaultModel: DialAIEntityModel;

dialTest.beforeAll(async () => {
  defaultModel = ModelsUtil.getDefaultModel()!;
});

dialTest(
  'Cancel the Export with attachments',
  async ({
    conversationData,
    fileApiHelper,
    dataInjector,
    localStorageManager,
    dialHomePage,
    conversations,
    conversationDropdownMenu,
    importExportLoader,
    setTestIds,
  }) => {
    setTestIds('EPMRTC-1980');
    let cancelExportConversation: Conversation;

    await dialTest.step(
      'Upload image to root folder and prepare conversation containing this image',
      async () => {
        const imageUrl = await fileApiHelper.putFile(Attachment.sunImageName);
        cancelExportConversation =
          conversationData.prepareConversationWithAttachmentInResponse(
            imageUrl,
            defaultModel.id,
          );
        await dataInjector.createConversations([cancelExportConversation]);
        await localStorageManager.setSelectedConversation(
          cancelExportConversation,
        );
      },
    );

    await dialTest.step(
      'Start exporting conversation with attachment and cancel in the middle',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        await dialHomePage.throttleAPIResponse('**/*');
        await conversations.openEntityDropdownMenu(
          cancelExportConversation.name,
        );
        await conversationDropdownMenu.selectMenuOption(MenuOptions.export);
        await conversationDropdownMenu.selectMenuOption(
          MenuOptions.withAttachments,
        );
        // eslint-disable-next-line playwright/no-force-option
        await importExportLoader.stopLoading.click({ force: true });
        await importExportLoader.waitForState({ state: 'hidden' });
        await dialHomePage.unRouteAllResponses();
        const exportedFiles = FileUtil.getExportedFiles();
        expect
          .soft(
            exportedFiles?.find((f) =>
              f.includes(Import.importAttachmentExtension),
            ),
            ExpectedMessages.dataIsNotExported,
          )
          .toBeUndefined();
      },
    );
  },
);

dialTest(
  'Stop the import',
  async ({
    chatBar,
    dialHomePage,
    conversations,
    importExportLoader,
    setTestIds,
  }) => {
    setTestIds('EPMRTC-1982');

    await dialTest.step(
      'Import file, stop import in the middle and verify chat is not imported',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        const beforeImportConversations =
          await conversations.getTodayConversations();
        await dialHomePage.throttleAPIResponse('**/*');
        await dialHomePage.uploadData(
          { path: Import.importedAttachmentsFilename },
          () => chatBar.importButton.click(),
        );
        // eslint-disable-next-line playwright/no-force-option
        await importExportLoader.stopLoading.click({ force: true });
        await importExportLoader.waitForState({ state: 'hidden' });
        await dialHomePage.unRouteAllResponses();
        const afterImportConversations =
          await conversations.getTodayConversations();
        expect
          .soft(
            afterImportConversations.length,
            ExpectedMessages.dataIsNotImported,
          )
          .toBe(beforeImportConversations.length);
      },
    );
  },
);

dialTest(
  'Export and import file with pictures generated by DALL-E-3.\n' +
    'Export and import file with pictures loaded to Gemini Pro Vision.\n' +
    'Export and Import chat with attachments by different users.\n' +
    'Import updated exported zip.\n' +
    'Continue working with imported chat with attachments',
  async ({
    conversationData,
    fileApiHelper,
    dataInjector,
    localStorageManager,
    dialHomePage,
    conversations,
    conversationDropdownMenu,
    chatBar,
    confirmationDialog,
    chatMessages,
    chat,
    chatHeader,
    talkToSelector,
    marketplacePage,
    setTestIds,
  }) => {
    setTestIds(
      'EPMRTC-1975',
      'EPMRTC-1976',
      'EPMRTC-1985',
      'EPMRTC-1983',
      'EPMRTC-1988',
    );
    let responseImageConversation: Conversation;
    let requestImageConversation: Conversation;
    let historyConversation: Conversation;
    let exportedData: UploadDownloadData;
    const anotherUserFolderPath = `${API.importFilePath(BucketUtil.getBucket(), 'stability.stable-diffusion-xl')}`;

    await dialTest.step(
      'Upload images to default model path and root folder and prepare conversations with request and response containing this images',
      async () => {
        responseImageUrl = await fileApiHelper.putFile(
          Attachment.sunImageName,
          API.modelFilePath(defaultModel.id),
        );
        requestImageUrl = await fileApiHelper.putFile(
          Attachment.heartImageName,
        );

        responseImageConversation =
          conversationData.prepareConversationWithAttachmentInResponse(
            responseImageUrl,
            defaultModel,
          );
        conversationData.resetData();
        requestImageConversation =
          conversationData.prepareConversationWithAttachmentsInRequest(
            defaultModel,
            true,
            requestImageUrl,
          );
        conversationData.resetData();
        historyConversation = conversationData.prepareHistoryConversation(
          responseImageConversation,
          requestImageConversation,
        );
        await dataInjector.createConversations([historyConversation]);
        await localStorageManager.setSelectedConversation(historyConversation);
      },
    );

    await dialTest.step(
      'Export conversation with attachments with two models',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        await conversations.openEntityDropdownMenu(historyConversation.name);
        await conversationDropdownMenu.selectMenuOption(MenuOptions.export);
        exportedData = await dialHomePage.downloadData(() =>
          conversationDropdownMenu.selectMenuOption(
            MenuOptions.withAttachments,
          ),
        );

        const exportedFiles = FileUtil.getExportedFiles();
        expect
          .soft(
            exportedFiles?.find((f) =>
              f.includes(Import.importAttachmentExtension),
            ),
            ExpectedMessages.dataIsExported,
          )
          .toBeDefined();
      },
    );

    await dialTest.step(
      'Import exported file and verify conversation is shown on chat bar panel',
      async () => {
        await chatBar.deleteAllEntities();
        await fileApiHelper.deleteAllFiles();
        await confirmationDialog.confirm({ triggeredHttpMethod: 'DELETE' });
        await dialHomePage.importFile(exportedData, () =>
          chatBar.importButton.click(),
        );
        await conversations.getEntityByName(historyConversation.name).waitFor();
        await conversations.selectConversation(historyConversation.name);
        await chatMessages.waitForState({ state: 'attached' });
        const messagesCount =
          await chatMessages.chatMessages.getElementsCount();
        expect
          .soft(messagesCount, ExpectedMessages.messageCountIsCorrect)
          .toBe(historyConversation.messages.length);
      },
    );

    await dialTest.step(
      'Open attachment from response and verify image is loaded, attachment url is pointing to import path',
      async () => {
        responseImageAttachmentPath = `${API.importFilePath(BucketUtil.getBucket(), defaultModel.id)}/${Attachment.sunImageName}`;
        await chatMessages.expandChatMessageAttachment(
          2,
          Attachment.sunImageName,
        );
        const responseImageActualAttachmentUrl =
          await chatMessages.getChatMessageAttachmentUrl(2);
        const responseImageActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(2);
        expect
          .soft(
            responseImageActualAttachmentUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(responseImageAttachmentPath);
        expect
          .soft(
            responseImageActualDownloadUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(responseImageAttachmentPath);
      },
    );

    await dialTest.step(
      'Download attachment from request and verify attachment url is pointing to import path',
      async () => {
        requestImageAttachmentPath = `${API.importFileRootPath(BucketUtil.getBucket())}/${Attachment.heartImageName}`;
        const requestImageActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(3);
        expect
          .soft(
            requestImageActualDownloadUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(requestImageAttachmentPath);
      },
    );

    await dialTest.step(
      'Import file exported by another user and verify conversation is imported',
      async () => {
        await dialHomePage.importFile(
          { path: Import.importedAttachmentsFilename },
          () => chatBar.importButton.click(),
        );
        await conversations
          .getEntityByName(Import.importedConversationWithAttachmentsName)
          .waitFor();
        await conversations.selectConversation(
          Import.importedConversationWithAttachmentsName,
        );
        await chatMessages.waitForState({ state: 'attached' });
        const messagesCount =
          await chatMessages.chatMessages.getElementsCount();
        expect
          .soft(messagesCount, ExpectedMessages.messageCountIsCorrect)
          .toBe(historyConversation.messages.length);
      },
    );

    await dialTest.step(
      'Download attachment from request and verify attachment url is pointing to import path',
      async () => {
        const requestImageAttachmentPath = `${anotherUserFolderPath}/${Import.importedGpt4VisionAttachmentName}`;
        const requestImageActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(1);
        expect
          .soft(
            requestImageActualDownloadUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(requestImageAttachmentPath);
      },
    );

    await dialTest.step(
      'Open attachment from response and verify image is loaded, attachment url is pointing to import path',
      async () => {
        const stableDiffusionAttachmentPath = `${anotherUserFolderPath}/${Import.importedStableDiffusionAttachmentName}`;
        await chatMessages.expandChatMessageAttachment(
          4,
          Import.importedStableDiffusionAttachmentName,
        );
        const stableDiffusionActualAttachmentUrl =
          await chatMessages.getChatMessageAttachmentUrl(4);
        const stableDiffusionActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(4);
        expect
          .soft(
            stableDiffusionActualAttachmentUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(stableDiffusionAttachmentPath);
        expect
          .soft(
            stableDiffusionActualDownloadUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(stableDiffusionAttachmentPath);
      },
    );

    await dialTest.step(
      'Send new request in chat and verify response received',
      async () => {
        const simpleRequestModel = ModelsUtil.getModelForSimpleRequest();
        if (simpleRequestModel !== undefined) {
          await chatHeader.openConversationSettingsPopup();
          await talkToSelector.selectEntity(
            simpleRequestModel,
            marketplacePage,
          );
          await chat.applyNewEntity();
          await chat.sendRequestWithButton('1+2=');
          const messagesCount =
            await chatMessages.chatMessages.getElementsCount();
          expect
            .soft(messagesCount, ExpectedMessages.messageCountIsCorrect)
            .toBe(6);
        }
      },
    );
  },
);

dialTest(
  'Export and import file with attachments in playback mode',
  async ({
    conversationData,
    fileApiHelper,
    dataInjector,
    localStorageManager,
    dialHomePage,
    conversations,
    conversationDropdownMenu,
    chatBar,
    confirmationDialog,
    recentEntitiesAssertion,
    chatMessages,
    chat,
    playbackAssertion,
    chatMessagesAssertion,
    conversationAssertion,
    setTestIds,
  }) => {
    setTestIds('EPMRTC-3521');
    let responseImageConversation: Conversation;
    let requestImageConversation: Conversation;
    let historyConversation: Conversation;
    let playbackConversation: Conversation;
    let exportedData: UploadDownloadData;

    await dialTest.step(
      'Prepare conversation with attachments in the request and response and playback conversation based on it',
      async () => {
        responseImageUrl = await fileApiHelper.putFile(
          Attachment.sunImageName,
          API.modelFilePath(defaultModel.id),
        );
        requestImageUrl = await fileApiHelper.putFile(
          Attachment.heartImageName,
        );

        responseImageConversation =
          conversationData.prepareConversationWithAttachmentInResponse(
            responseImageUrl,
            defaultModel,
          );
        conversationData.resetData();
        requestImageConversation =
          conversationData.prepareConversationWithAttachmentsInRequest(
            defaultModel,
            true,
            requestImageUrl,
          );
        conversationData.resetData();
        historyConversation = conversationData.prepareHistoryConversation(
          responseImageConversation,
          requestImageConversation,
        );
        playbackConversation =
          conversationData.prepareDefaultPlaybackConversation(
            historyConversation,
          );
        await dataInjector.createConversations([
          historyConversation,
          playbackConversation,
        ]);
        await localStorageManager.setSelectedConversation(playbackConversation);
      },
    );

    await dialTest.step(
      'Export playback conversation with attachments',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        await conversations.openEntityDropdownMenu(playbackConversation.name);
        await conversationDropdownMenu.selectMenuOption(MenuOptions.export);
        exportedData = await dialHomePage.downloadData(
          () =>
            conversationDropdownMenu.selectMenuOption(
              MenuOptions.withAttachments,
            ),
          GeneratorUtil.exportedWithAttachmentsFilename(),
        );
      },
    );

    await dialTest.step(
      'Remove all entities, import exported file and verify playback conversation is shown on chat bar panel',
      async () => {
        await fileApiHelper.deleteAllFiles();
        await chatBar.deleteAllEntities();
        await confirmationDialog.confirm({ triggeredHttpMethod: 'DELETE' });
        await dialHomePage.importFile(exportedData, () =>
          chatBar.importButton.click(),
        );
        await conversationAssertion.assertEntityState(
          { name: playbackConversation.name },
          'visible',
        );
        await recentEntitiesAssertion.assertPlaybackIconState('visible');
      },
    );

    await dialTest.step(
      'Playback first conversation message and verify attachment is visible in the response and can be downloaded',
      async () => {
        await chat.playNextChatMessage(false);
        await playbackAssertion.assertPlaybackMessageContent(
          historyConversation.messages[0].content,
        );

        await chat.playNextChatMessage();
        responseImageAttachmentPath = `${API.importFilePath(BucketUtil.getBucket(), defaultModel.id)}/${Attachment.sunImageName}`;
        await chatMessages.expandChatMessageAttachment(
          2,
          Attachment.sunImageName,
        );
        await chatMessagesAssertion.assertMessageAttachmentUrl(
          2,
          responseImageAttachmentPath,
        );
        await chatMessagesAssertion.assertMessageDownloadUrl(
          2,
          responseImageAttachmentPath,
        );
      },
    );

    await dialTest.step(
      'Playback second conversation message and verify attachment is visible in the input field and request',
      async () => {
        await chat.playNextChatMessage(false);
        await playbackAssertion.assertPlaybackMessageContent(
          historyConversation.messages[2].content,
        );
        await playbackAssertion.assertPlaybackMessageAttachmentState(
          Attachment.heartImageName,
          'visible',
        );

        await chat.playNextChatMessage();
        requestImageAttachmentPath = `${API.importFileRootPath(BucketUtil.getBucket())}/${Attachment.heartImageName}`;
        await chatMessages.expandChatMessageAttachment(
          3,
          Attachment.heartImageName,
        );
        await chatMessagesAssertion.assertMessageAttachmentUrl(
          3,
          requestImageAttachmentPath,
        );
        await chatMessagesAssertion.assertMessageDownloadUrl(
          3,
          requestImageAttachmentPath,
        );
      },
    );
  },
);

dialTest(
  'Replay mode: export and import file with attachments in user message',
  async ({
    conversationData,
    fileApiHelper,
    dataInjector,
    localStorageManager,
    dialHomePage,
    conversations,
    conversationDropdownMenu,
    chatBar,
    confirmationDialog,
    recentEntitiesAssertion,
    chat,
    chatMessages,
    chatAssertion,
    chatMessagesAssertion,
    conversationAssertion,
    apiAssertion,
    setTestIds,
  }) => {
    setTestIds('EPMRTC-914');
    let historyConversation: Conversation;
    let replayConversation: Conversation;
    let exportedData: UploadDownloadData;
    let requestDocUrl: string;

    await dialTest.step(
      'Prepare conversation with image, pdf attachments in the requests and replay conversation based on it',
      async () => {
        requestImageUrl = await fileApiHelper.putFile(Attachment.sunImageName);
        requestDocUrl = await fileApiHelper.putFile(Attachment.pdfName);
        historyConversation =
          conversationData.prepareHistoryConversationWithAttachmentsInRequest({
            1: {
              model: defaultModel,
              hasRequest: true,
              attachmentUrl: [requestImageUrl],
            },
            2: {
              model: defaultModel,
              hasRequest: true,
              attachmentUrl: [requestDocUrl],
            },
          });
        replayConversation =
          conversationData.prepareDefaultReplayConversation(
            historyConversation,
          );
        await dataInjector.createConversations([
          historyConversation,
          replayConversation,
        ]);
        await localStorageManager.setSelectedConversation(replayConversation);
      },
    );

    await dialTest.step(
      'Export replay conversation with attachments',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        await conversations.openEntityDropdownMenu(replayConversation.name);
        await conversationDropdownMenu.selectMenuOption(MenuOptions.export);
        exportedData = await dialHomePage.downloadData(
          () =>
            conversationDropdownMenu.selectMenuOption(
              MenuOptions.withAttachments,
            ),
          GeneratorUtil.exportedWithAttachmentsFilename(),
        );
      },
    );

    await dialTest.step(
      'Remove all entities, import exported file and verify replay conversation is opened',
      async () => {
        await fileApiHelper.deleteAllFiles();
        await chatBar.deleteAllEntities();
        await confirmationDialog.confirm({ triggeredHttpMethod: 'DELETE' });
        await dialHomePage.importFile(exportedData, () =>
          chatBar.importButton.click(),
        );
        await conversationAssertion.assertEntityState(
          { name: replayConversation.name },
          'visible',
        );
        await recentEntitiesAssertion.assertReplayAsIsBordersColor(
          Colors.controlsBackgroundAccent,
        );
        await chatAssertion.assertReplayButtonState('visible');
      },
    );

    await dialTest.step(
      'Replay conversation and verify attachments are sent in the requests',
      async () => {
        await dialHomePage.mockChatTextResponse(
          MockedChatApiResponseBodies.simpleTextBody,
        );
        const replayRequests = await chat.startReplayForDifferentModels();
        await apiAssertion.verifyRequestAttachments(
          replayRequests[0],
          requestImageUrl,
        );
        await apiAssertion.verifyRequestAttachments(
          replayRequests[1],
          requestDocUrl,
        );
      },
    );

    await dialTest.step(
      'Verify request attachments can be opened and downloaded',
      async () => {
        const imageMessageIndex = 1;
        const docMessageIndex = 3;

        const imageAttachmentPath = `${API.importFileRootPath(BucketUtil.getBucket())}/${Attachment.sunImageName}`;
        await chatMessages.expandChatMessageAttachment(
          imageMessageIndex,
          Attachment.sunImageName,
        );
        await chatMessagesAssertion.assertMessageAttachmentUrl(
          imageMessageIndex,
          imageAttachmentPath,
        );
        await chatMessagesAssertion.assertMessageDownloadUrl(
          imageMessageIndex,
          imageAttachmentPath,
        );

        const docAttachmentPath = `${API.importFileRootPath(BucketUtil.getBucket())}/${Attachment.pdfName}`;
        await chatMessagesAssertion.assertMessageDownloadUrl(
          docMessageIndex,
          docAttachmentPath,
        );
      },
    );
  },
);

dialTest(
  'Replay mode: export and import file with attachments in model response',
  async ({
    conversationData,
    fileApiHelper,
    dataInjector,
    localStorageManager,
    dialHomePage,
    conversations,
    conversationDropdownMenu,
    chatBar,
    confirmationDialog,
    chatMessages,
    chat,
    chatMessagesAssertion,
    conversationAssertion,
    sendMessageAssertion,
    setTestIds,
  }) => {
    setTestIds('EPMRTC-3942');
    let historyConversation: Conversation;
    let replayConversation: Conversation;
    let exportedData: UploadDownloadData;

    await dialTest.step(
      'Prepare conversation with attachments in the responses and replay conversation based on it',
      async () => {
        responseImageUrl = await fileApiHelper.putFile(
          Attachment.sunImageName,
          API.modelFilePath(defaultModel.id),
        );
        secondResponseImageUrl = await fileApiHelper.putFile(
          Attachment.cloudImageName,
          API.modelFilePath(defaultModel.id),
        );
        historyConversation =
          conversationData.prepareHistoryConversationWithAttachmentsInResponse({
            1: { attachmentUrl: responseImageUrl, model: defaultModel },
            2: {
              attachmentUrl: secondResponseImageUrl,
              model: defaultModel,
            },
          });
        replayConversation =
          conversationData.preparePartiallyReplayedConversation(
            historyConversation,
            1,
          );
        await dataInjector.createConversations([
          historyConversation,
          replayConversation,
        ]);
        await localStorageManager.setSelectedConversation(replayConversation);
      },
    );

    await dialTest.step(
      'Export replay conversation with attachments',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        await conversations.openEntityDropdownMenu(replayConversation.name);
        await conversationDropdownMenu.selectMenuOption(MenuOptions.export);
        exportedData = await dialHomePage.downloadData(
          () =>
            conversationDropdownMenu.selectMenuOption(
              MenuOptions.withAttachments,
            ),
          GeneratorUtil.exportedWithAttachmentsFilename(),
        );
      },
    );

    await dialTest.step(
      'Remove all entities, import exported file and verify replay mode is active',
      async () => {
        await fileApiHelper.deleteAllFiles();
        await chatBar.deleteAllEntities();
        await confirmationDialog.confirm({ triggeredHttpMethod: 'DELETE' });
        await dialHomePage.importFile(exportedData, () =>
          chatBar.importButton.click(),
        );
        await conversationAssertion.assertEntityState(
          { name: replayConversation.name },
          'visible',
        );
        await sendMessageAssertion.assertContinueReplayButtonState('visible');
      },
    );

    await dialTest.step(
      'Verify first response attachment is visible and can be downloaded',
      async () => {
        const responseMessageIndex = 2;
        responseImageAttachmentPath = `${API.importFilePath(BucketUtil.getBucket(), defaultModel.id)}/${Attachment.sunImageName}`;
        await chatMessages.expandChatMessageAttachment(
          responseMessageIndex,
          Attachment.sunImageName,
        );
        await chatMessagesAssertion.assertMessageAttachmentUrl(
          responseMessageIndex,
          responseImageAttachmentPath,
        );
        await chatMessagesAssertion.assertMessageDownloadUrl(
          responseMessageIndex,
          responseImageAttachmentPath,
        );
      },
    );

    await dialTest.step(
      'Proceed replaying and verify only last response is regenerated ',
      async () => {
        await dialHomePage.mockChatTextResponse(
          MockedChatApiResponseBodies.simpleTextBody,
        );
        await chat.proceedReplaying(true);
        await chatMessagesAssertion.assertMessagesCount(
          historyConversation.messages.length,
        );
      },
    );
  },
);
