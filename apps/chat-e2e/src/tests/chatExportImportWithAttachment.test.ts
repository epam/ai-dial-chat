import { Conversation } from '@/chat/types/chat';
import dialTest from '@/src/core/dialFixtures';
import {
  API,
  Attachment,
  ExpectedMessages,
  Import,
  MenuOptions,
  ModelIds,
} from '@/src/testData';
import { UploadDownloadData } from '@/src/ui/pages';
import { BucketUtil, FileUtil, ModelsUtil } from '@/src/utils';
import { expect } from '@playwright/test';

let dalleImageUrl: string;
let gptProVisionImageUrl: string;
let gptProVisionAttachmentPath: string;
let dalleAttachmentPath: string;

dialTest(
  'Cancel the Export with attachments',
  async ({
    conversationData,
    fileApiHelper,
    dataInjector,
    localStorageManager,
    dialHomePage,
    conversations,
    conversationDropdownMenu,
    importExportLoader,
    setTestIds,
  }) => {
    setTestIds('EPMRTC-1980');
    let cancelExportConversation: Conversation;

    await dialTest.step(
      'Upload image to root folder and prepare conversation containing this image',
      async () => {
        const imageUrl = await fileApiHelper.putFile(Attachment.sunImageName);
        cancelExportConversation =
          conversationData.prepareConversationWithAttachmentInResponse(
            imageUrl,
            ModelIds.DALLE,
          );
        await dataInjector.createConversations([cancelExportConversation]);
        await localStorageManager.setSelectedConversation(
          cancelExportConversation,
        );
      },
    );

    await dialTest.step(
      'Start exporting conversation with attachment and cancel in the middle',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        await dialHomePage.throttleAPIResponse('**/*');
        await conversations.openConversationDropdownMenu(
          cancelExportConversation.name,
        );
        await conversationDropdownMenu.selectMenuOption(MenuOptions.export);
        await conversationDropdownMenu.selectMenuOption(
          MenuOptions.withAttachments,
        );
        // eslint-disable-next-line playwright/no-force-option
        await importExportLoader.stopLoading.click({ force: true });
        await importExportLoader.waitForState({ state: 'hidden' });
        await dialHomePage.unRouteAllResponses();
        const exportedFiles = FileUtil.getExportedFiles();
        expect
          .soft(
            exportedFiles?.find((f) =>
              f.includes(Import.importAttachmentExtension),
            ),
            ExpectedMessages.dataIsNotExported,
          )
          .toBeUndefined();
      },
    );
  },
);

dialTest(
  'Stop the import',
  async ({
    chatBar,
    dialHomePage,
    conversations,
    importExportLoader,
    setTestIds,
  }) => {
    setTestIds('EPMRTC-1982');

    await dialTest.step(
      'Import file, stop import in the middle and verify chat is not imported',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        const beforeImportConversations =
          await conversations.getTodayConversations();
        await dialHomePage.throttleAPIResponse('**/*');
        await dialHomePage.uploadData(
          { path: Import.importedAttachmentsFilename },
          () => chatBar.importButton.click(),
        );
        // eslint-disable-next-line playwright/no-force-option
        await importExportLoader.stopLoading.click({ force: true });
        await importExportLoader.waitForState({ state: 'hidden' });
        await dialHomePage.unRouteAllResponses();
        const afterImportConversations =
          await conversations.getTodayConversations();
        expect
          .soft(
            afterImportConversations.length,
            ExpectedMessages.dataIsNotImported,
          )
          .toBe(beforeImportConversations.length);
      },
    );
  },
);

dialTest(
  'Export and import file with pictures generated by DALL-E-3.\n' +
    'Export and import file with pictures loaded to Gemini Pro Vision.\n' +
    'Export and Import chat with attachments by different users.\n' +
    'Import updated exported zip.\n' +
    'Continue working with imported chat with attachments',
  async ({
    conversationData,
    fileApiHelper,
    dataInjector,
    localStorageManager,
    dialHomePage,
    conversations,
    conversationDropdownMenu,
    chatBar,
    confirmationDialog,
    chatMessages,
    chat,
    chatHeader,
    talkToSelector,
    setTestIds,
  }) => {
    setTestIds(
      'EPMRTC-1975',
      'EPMRTC-1976',
      'EPMRTC-1985',
      'EPMRTC-1983',
      'EPMRTC-1988',
    );
    let dalleConversation: Conversation;
    let gptProVisionConversation: Conversation;
    let historyConversation: Conversation;
    let exportedData: UploadDownloadData;
    let conversationPath: string;
    let anotherUserConversationPath: string;

    await dialTest.step(
      'Upload images to DALL-E-3 path and root folder and prepare conversations with request and response containing this images',
      async () => {
        dalleImageUrl = await fileApiHelper.putFile(
          Attachment.sunImageName,
          API.modelFilePath(ModelIds.DALLE),
        );
        gptProVisionImageUrl = await fileApiHelper.putFile(
          Attachment.heartImageName,
        );

        dalleConversation =
          conversationData.prepareConversationWithAttachmentInResponse(
            dalleImageUrl,
            ModelIds.DALLE,
          );
        conversationData.resetData();
        gptProVisionConversation =
          conversationData.prepareConversationWithAttachmentsInRequest(
            ModelIds.GPT_4_VISION_PREVIEW,
            true,
            gptProVisionImageUrl,
          );
        conversationData.resetData();
        historyConversation = conversationData.prepareHistoryConversation(
          dalleConversation,
          gptProVisionConversation,
        );
        await dataInjector.createConversations([historyConversation]);
        await localStorageManager.setSelectedConversation(historyConversation);
        conversationPath = `${API.importFilePath(BucketUtil.getBucket())}/${historyConversation.name}`;
      },
    );

    await dialTest.step(
      'Export conversation with attachments with two models',
      async () => {
        await dialHomePage.openHomePage();
        await dialHomePage.waitForPageLoaded();
        await conversations.openConversationDropdownMenu(
          historyConversation.name,
        );
        await conversationDropdownMenu.selectMenuOption(MenuOptions.export);
        exportedData = await dialHomePage.downloadData(() =>
          conversationDropdownMenu.selectMenuOption(
            MenuOptions.withAttachments,
          ),
        );

        const exportedFiles = FileUtil.getExportedFiles();
        expect
          .soft(
            exportedFiles?.find((f) =>
              f.includes(Import.importAttachmentExtension),
            ),
            ExpectedMessages.dataIsExported,
          )
          .toBeDefined();
      },
    );

    await dialTest.step(
      'Import exported file and verify conversation is shown on chat bar panel',
      async () => {
        await chatBar.deleteAllEntities();
        await fileApiHelper.deleteAllFiles();
        await confirmationDialog.confirm({ triggeredHttpMethod: 'DELETE' });
        await dialHomePage.importFile(exportedData, () =>
          chatBar.importButton.click(),
        );
        await conversations
          .getConversationByName(historyConversation.name)
          .waitFor();
        await conversations.selectConversation(historyConversation.name);
        await chatMessages.waitForState({ state: 'attached' });
        const messagesCount =
          await chatMessages.chatMessages.getElementsCount();
        expect
          .soft(messagesCount, ExpectedMessages.messageCountIsCorrect)
          .toBe(historyConversation.messages.length);
      },
    );

    await dialTest.step(
      'Open attachment from response and verify image is loaded, attachment url is pointing to import path',
      async () => {
        dalleAttachmentPath = `${conversationPath}/${Attachment.sunImageName}`;
        await chatMessages.expandChatMessageAttachment(
          2,
          Attachment.sunImageName,
        );
        const dalleActualAttachmentUrl =
          await chatMessages.getChatMessageAttachmentUrl(2);
        const dalleActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(2);
        expect
          .soft(dalleActualAttachmentUrl, ExpectedMessages.attachmentUrlIsValid)
          .toContain(dalleAttachmentPath);
        expect
          .soft(dalleActualDownloadUrl, ExpectedMessages.attachmentUrlIsValid)
          .toContain(dalleAttachmentPath);
      },
    );

    await dialTest.step(
      'Download attachment from request and verify attachment url is pointing to import path',
      async () => {
        gptProVisionAttachmentPath = `${conversationPath}/${Attachment.heartImageName}`;
        const gptProVisionActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(3);
        expect
          .soft(
            gptProVisionActualDownloadUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(gptProVisionAttachmentPath);
      },
    );

    await dialTest.step(
      'Import file exported by another user and verify conversation is imported',
      async () => {
        anotherUserConversationPath = `${API.importFilePath(BucketUtil.getBucket())}/${Import.importedConversationWithAttachmentsName}`;
        await dialHomePage.importFile(
          { path: Import.importedAttachmentsFilename },
          () => chatBar.importButton.click(),
        );
        await conversations
          .getConversationByName(Import.importedConversationWithAttachmentsName)
          .waitFor();
        await conversations.selectConversation(
          Import.importedConversationWithAttachmentsName,
        );
        await chatMessages.waitForState({ state: 'attached' });
        const messagesCount =
          await chatMessages.chatMessages.getElementsCount();
        expect
          .soft(messagesCount, ExpectedMessages.messageCountIsCorrect)
          .toBe(historyConversation.messages.length);
      },
    );

    await dialTest.step(
      'Download attachment from request and verify attachment url is pointing to import path',
      async () => {
        const gptProVisionAttachmentPath = `${anotherUserConversationPath}/${Import.importedGpt4VisionAttachmentName}`;
        const gptProVisionActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(1);
        expect
          .soft(
            gptProVisionActualDownloadUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(gptProVisionAttachmentPath);
      },
    );

    await dialTest.step(
      'Open attachment from response and verify image is loaded, attachment url is pointing to import path',
      async () => {
        const stableDiffusionAttachmentPath = `${anotherUserConversationPath}/${Import.importedStableDiffusionAttachmentName}`;
        await chatMessages.expandChatMessageAttachment(
          4,
          Import.importedStableDiffusionAttachmentName,
        );
        const stableDiffusionActualAttachmentUrl =
          await chatMessages.getChatMessageAttachmentUrl(4);
        const stableDiffusionActualDownloadUrl =
          await chatMessages.getChatMessageDownloadUrl(4);
        expect
          .soft(
            stableDiffusionActualAttachmentUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(stableDiffusionAttachmentPath);
        expect
          .soft(
            stableDiffusionActualDownloadUrl,
            ExpectedMessages.attachmentUrlIsValid,
          )
          .toContain(stableDiffusionAttachmentPath);
      },
    );

    await dialTest.step(
      'Send new request in chat and verify response received',
      async () => {
        await chatHeader.openConversationSettingsPopup();
        await talkToSelector.selectModel(ModelsUtil.getDefaultModel()!);
        await chat.applyNewEntity();
        await chat.sendRequestWithButton('1+2=');
        const messagesCount =
          await chatMessages.chatMessages.getElementsCount();
        expect
          .soft(messagesCount, ExpectedMessages.messageCountIsCorrect)
          .toBe(6);
      },
    );
  },
);
